class UsersController < ApplicationController
  layout 'admin'
  before_filter :require_login
  before_filter :require_admin, :except => [:show,:user_project_permissions]
  before_filter :find_user, :only => [:show, :edit, :update, :edit_membership, :destroy_membership]

  helper :sort
  include SortHelper

  def index
    sort_init 'login', 'asc'
    sort_update %w(login firstname lastname mail admin created_on last_login_on)
    @limit = 50
    @status = params[:status] ? params[:status].to_i : 1
    c = ARCondition.new(@status == 0 ? "status <> 0" : ["status = ?", @status])

    unless params[:name].blank?
      name = "%#{params[:name].strip.downcase}%"
      c << ["LOWER(login) LIKE ? OR LOWER(firstname) LIKE ? OR LOWER(lastname) LIKE ? OR LOWER(mail) LIKE ?", name, name, name, name]
    end
    
    @user_count = User.count(:conditions => c.conditions)
    @user_pages = Paginator.new self, @user_count, @limit, params['page']
    @offset ||= @user_pages.current.offset
    @users =  User.find :all,
                        :order => sort_clause,
                        :conditions => c.conditions,
                        :limit  =>  @limit,
                        :offset =>  @offset

    respond_to do |format|
      format.html { render :layout => !request.xhr? }
    end	
  end
  
  def show
    # show projects based on current user visibility
    @memberships = @user.memberships.all(:conditions => Project.visible_by(User.current))
    
    unless User.current.admin?
      if !@user.active? || (@user != User.current  && @memberships.empty? && events.empty?)
        render_404
        return
      end
    end
    
    respond_to do |format|
      format.html { render :layout => 'base' }
    end
  end

  def new
    @user = User.new
  end
  
 # verify :method => :post, :only => :create, :render => {:nothing => true, :status => :method_not_allowed }

  
  def create
    
    if (params[:commit] == "Add")
      
      user_details = params[:user].is_a?(Hash)? JSON.parse(params[:user]) : JSON.parse(params[:user].first)       
      @user = User.new(user_details)
      @user.login = user_details["login"]
    else
      @user = User.new
      @user.safe_attributes = params[:user]
      @user.admin = params[:user][:admin] || false
      @user.login = params[:user][:login]
    end
  
    if @user.save
      respond_to do |format|
        format.html {
          flash[:notice] = "User creation successful"
          redirect_to(params[:continue] ? 
            {:controller => 'users', :action => 'new'} : 
            {:controller => 'users', :action => 'edit', :id => @user}
          )
        }
       
      end
    else
      # Clear password input
     # @user.password = @user.password_confirmation = nil
     # flash[:error] = "User creation failed"
      respond_to do |format|
        format.html { render :action => 'new' }
      end
    end
  end

   
  def edit
    @auth_sources = "" #AuthSource.find(:all)
    @membership ||= Member.new
  end
  
 # verify :method => :put, :only => :update, :render => {:nothing => true, :status => :method_not_allowed }
  def update
    @user.admin = params[:user][:admin] if params[:user][:admin]
    @user.login = params[:user][:login] if params[:user][:login]
    if params[:user][:password].present? && (@user.auth_source_id.nil? || params[:user][:auth_source_id].blank?)
      @user.password, @user.password_confirmation = params[:user][:password], params[:user][:password_confirmation]
    end
    @user.safe_attributes = params[:user]
    # Was the account actived ? (do it before User#save clears the change)
    was_activated = (@user.status_change == [User::STATUS_ACTIVE])
    # TODO: Similar to My#account
  

    if @user.save
  
      if was_activated
        #Mailer.deliver_account_activated(@user)
      elsif @user.active? && params[:send_information] && !params[:user][:password].blank? && @user.auth_source_id.nil?
       # Mailer.deliver_account_information(@user, params[:user][:password])
      end
      
      respond_to do |format|
        format.html {
          flash[:notice] = "Successful Update"
          redirect_to :back
        }
      end
    else
      @auth_sources = AuthSource.find(:all)
      @membership ||= Member.new
      # Clear password input
      @user.password = @user.password_confirmation = nil

      respond_to do |format|
        format.html { render :action => :edit }
      end
    end
  rescue ::ActionController::RedirectBackError
    redirect_to :controller => 'users', :action => 'edit', :id => @user
  end

  def edit_membership
    @membership = Member.edit_membership(params[:membership_id], @user)
    @membership.save if request.post?
    respond_to do |format|
      if @membership.valid?
        format.html { redirect_to :controller => 'users', :action => 'edit', :id => @user, :tab => 'memberships' }
        format.js {
          render(:update) {|page|
            page.replace_html "tab-content-memberships", :partial => 'users/memberships'
            page.visual_effect(:highlight, "member-#{@membership.id}")
          }
        }
      else
        format.js {
          render(:update) {|page|
            page.alert("Failed to save members","Error")
          }
        }
      end
    end
  end

  def autocomplete_for_user
    @role = Role.find(params[:id])
    if !params[:q].blank?
      ldap_users =  User.ldap_handling(params[:q]) if params[:q].length > 2
    end
    @users = User.active.like(params[:q]).find(:all, :limit => 100) - @role.users
    @users = @users|ldap_users if !ldap_users.blank?
    @users
    render :layout => false
  end

  
  def destroy_membership
    @membership = Member.find(params[:membership_id])
    if request.post? && @membership.deletable?
      @membership.destroy
    end
    respond_to do |format|
      format.html { redirect_to :controller => 'users', :action => 'edit', :id => @user, :tab => 'memberships' }
      format.js { render(:update) {|page| page.replace_html "tab-content-memberships", :partial => 'users/memberships'} }
    end
  end

 
  
  private
  
  def find_user
    if params[:id] == 'current'
      require_login || return
      @user = User.current
    else
      @user = User.find(params[:id])
    end
  rescue ActiveRecord::RecordNotFound
    render_404
  end
end
