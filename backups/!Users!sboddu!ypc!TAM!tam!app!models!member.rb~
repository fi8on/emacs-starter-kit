class Member < ActiveRecord::Base
  belongs_to :user
  belongs_to :principal, :foreign_key => 'user_id'
  has_many :member_permissions, :dependent => :destroy
  has_many :permissions, :through => :member_permissions
  belongs_to :project

  validates_presence_of :principal, :project
  validates_uniqueness_of :user_id, :scope => :project_id

 # after_destroy :unwatch_from_permission_change
  
  def name
    self.user.name
  end
  
  alias :base_role_ids= :permission_ids=
  def permission_ids=(arg)
    ids = (arg || []).collect(&:to_i) - [0]
    # Keep inherited roles
    ids += member_permissions.select {|mr| !mr.inherited_from.nil?}.collect(&:permission_id)
    
    new_role_ids = ids - permission_ids
    # Add new roles
    new_role_ids.each {|id| member_permissions << MemberPermission.new(:permission_id => id) }
    # Remove roles (Rails' #role_ids= will not trigger MemberPermission#on_destroy)
    member_permissions_to_destroy = member_permissions.select {|mr| !ids.include?(mr.permission_id)}
    if member_permissions_to_destroy.any?
      member_permissions_to_destroy.each(&:destroy)
      unwatch_from_permission_change
    end
  end
  
  def <=>(member)
    a, b = permissions.sort.first, member.permissions.sort.first
    a == b ? (principal <=> member.principal) : (a <=> b)
  end
  
  def deletable?
    member_permissions.detect {|mr| mr.inherited_from}.nil?
  end
  
  def include?(user)
    if principal.is_a?(Role)
      !user.nil? && user.roles.include?(principal)
    else
      self.user == user
    end
  end
  
   # Find or initilize a Member with an id, attributes, and for a Principal
  def self.edit_membership(id, new_attributes, principal=nil)
    @membership = id.present? ? Member.find(id) : Member.new(:principal => principal)
    @membership.attributes = new_attributes
    @membership
  end
  
  protected
  
  def validate
    errors.add_on_empty :permission if member_permissions.empty? && permissions.empty?
  end
  
end
