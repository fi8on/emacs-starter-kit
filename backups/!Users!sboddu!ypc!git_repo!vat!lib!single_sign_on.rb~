module SingleSignOn

  USER_TYPES = {'E'=>'Employee', 'C'=>'Contractor', 'G'=>'Guest', 'A'=>'Application'}
  AUTH_TYPES = {'I'=>'AT&T Interactive', 'T'=>'AT&T'}
    
  def role_names
    if /^\d+$/ =~ roles.first # first entry contains the flag size
      codes = []
      roles[1..-1].each_slice(roles.first.to_i) do |a|
        codes << a.join
      end
    else
      codes = roles
    end
    names = codes.inject([]) { |results, code| results << SSO_ROLES[code] if SSO_ROLES.include?(code); results }
    names.sort{ |a, b| a.first <=> b.first }.map{ |rank, name| name }
  end

  def info
    #* user - username (aliases: login, username, name)
    #* user_type - Type of user: E=Employee, C=Contractor, G=Guest, A=Application
    #* auth_type - Authentication type: I=AT&T Interactive, T=AT&T
    #* roles - Array of role flags assigned to user. Only applicable if SSO is used to assign user role flags.
    #          An optional number before role flags indicates the number of bytes in each role flag.
    #          Default (no number) is 1-byte role.
    #
    #* logout_url (v1.0.1) - String of development or production SSO logout URL depending on how sso_auth was called. Takes optional :url parameter which SSO will redirect to if the user immediately does a re-login.    
    "user:        #{user.inspect}\n" \
    "user_type:   #{USER_TYPES[user_type].inspect}\n" \
    "auth_type:   #{AUTH_TYPES[auth_type].inspect}\n" \
    "roles:       #{role_names.inspect}\n" \
    "logout_url:  #{logout_url.inspect}"
  end
end
