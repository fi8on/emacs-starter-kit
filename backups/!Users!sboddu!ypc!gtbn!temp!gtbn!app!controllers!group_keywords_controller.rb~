require "pp"
class GroupKeywordsController < ApplicationController
  before_filter :require_login
  active_scaffold :group_keywords do | configure |
    configure.columns = [:tag_business_group_id,:keywords,:created_at,:updated_at,:is_deleted]
    configure.list.columns =[:keywords,:created_at,:is_deleted]
    configure.columns[:tag_business_group_id].label ="Group Id"
    configure.create.link.label = "New Keywords &nbsp;&nbsp; "
    configure.search.link.label = "  Search"
    configure.actions.exclude :show
    configure.actions.exclude :delete
     configure.action_links.add 'export_keywords',:label => 'Export', :parameters =>{ :controller =>'group_keywords' }, :method =>:post, :page => true
    configure.action_links.add 'delete_keywords',:label => 'Delete', :type =>:record,:parameters =>{ :controller =>'group_keywords' }, :method =>:post, :page => true

  end


  def delete_keywords
    group_id = GroupKeyword.deleting_keywords(params[:id])
    redirect_to :action => "keywords_list", :id => group_id
  end

  def keywords_list
    @id = params[:id]
    @group_name = Group.find(@id)
  end


  def keywords_names_list
    @id = params[:id]
    @keywords =  []
    @keywords = params[:search]
    @keywords = @keywords.split(/\s*,\s*/)
  end

 def update_keywords

    @total_keywords = params[:keywords_list]
    count = 0
    @total_keywords.to_i.times {
      if params["add_keywords_#{count}".to_sym]
        newKeywords = GroupKeyword.new()
        newKeywords.tag_business_group_id = params[:id]
        newKeywords.keywords = params["add_keywords_#{count}".to_sym]
        Time.zone = 'Pacific Time (US & Canada)'
        newKeywords.created_at = Time.zone.now
        newKeywords.save!()
      end
      count = count + 1
    }
    redirect_to :action => "keywords_list", :id => params[:id]
  end

  def update_keywords_notes
    field = params[:keywords]
    fields = field.to_s.titleize
    newKeywords = KeywordNote.new()
    newKeywords.tag_business_group_id = params[:id]
    newKeywords.keywords_notes = fields
    Time.zone = 'Pacific Time (US & Canada)'
    newKeywords.created_at = Time.zone.now
    newKeywords.save!()
    redirect_to :action => "keywords_list", :id => params[:id]
  end

  def import_keywords_from_csv

    parsed_file = CSV::Reader.parse(params[:csv_file])
    Time.zone = 'Pacific Time (US & Canada)'
    parsed_file.each do |row|
      if row[0]
         row[0] = format_names(row[0].to_s)
        @duplicate = GroupKeyword.find(:first,:conditions => { :keywords =>"#{row[0]}" ,:tag_business_group_id =>params[:id] ,:is_deleted =>0})
        if(!@duplicate and row[0].to_s != 'Keywords')
          newKeywords = GroupKeyword.new()
          newKeywords.tag_business_group_id = params[:id]
          newKeywords.keywords = row[0]
          newKeywords.is_deleted =0
          newKeywords.created_at = Time.zone.now
          newKeywords.save!()
        end
      end
      begin
      rescue CSV::IllegalFormatError #rescue the error to more gracefully display the info
      end
    end

    redirect_to :action => "keywords_list", :id => params[:id]
  end

 def export_keywords
    # find_page is how the List module gets its data. see Actions::List#do_list.
    records = find_page().items
    return if records.size == 0
    # Note this code is very generic.  We could move this method and the
    # action_link configuration into the ApplicationController and reuse it
    # for all our models.
    data = ""
    cls = records[0].class
    data << cls.csv_header << "\r\n"
    records.each do |inst|
      data << inst.to_csv << "\r\n"
    end
    send_data data, :type => 'text/csv', :filename => cls.name.pluralize + '.csv'
  end

  def format_names(string)
    string.strip!
    string
 end

end


