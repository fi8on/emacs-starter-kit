ATTI_CAP_VERSION = '0.1.27'

begin
  gem 'atti_cap', "=#{ATTI_CAP_VERSION}"
  require 'atti_cap'
rescue LoadError
  puts "Missing prerequisite gem!"
  puts "gem install -v #{ATTI_CAP_VERSION} atti_cap --source http://gems.atti.wc1.yellowpages.com"
  exit 1
end

# global settings
set :app_name,   "ghosttag"
set :deployed_rev,   (`svn info 2>/dev/null`.match(/^Revision: (\w+)/)[1]).chomp
set :deploy_via,    :copy
set :copy_strategy, :export
set :ruby_prefix, "/home/t/ruby-ypc"
set :app_env_args, "TNS_ADMIN=#{current_path}/config"
set :copy_exclude, [".svn/*", ".git/*"]

#appserver configuration
set :app_server, unicorn
set :app_processes, 3
set :server_list, lambda{[fetch(:app_server)]}

set :oracle_home, "/usr/lib/oracle/10.2.0.3/client64/lib"
set :oracle_env, "ORACLE_HOME=#{oracle_home} NLS_LANG=American_America.UTF8"

case deploy_env
  when "development"
    set :default_database_file, "database.development.yml.gpg"
#    overwrite copy_exclude
    set :copy_exclude, [".svn/*"]
    set :app_port, 5200
    set :rails_env,   'development'
    set :domain, 'gtbn.np.wc1.yellowpages.com'
    set :server_name, domain
    role :app, domain
    role :web, domain
    role :db, domain ,:primary => true
    set :disable_sso, true
  when "qa"
    set :default_database_file, "database.qa.yml.gpg"
#    overwrite copy_exclude
    set :copy_exclude, [".svn/*"]
    set :app_port, 5200
    set :rails_env,   'qa'
    set :domain, 'gtbnqa.np.wc1.yellowpages.com'
    set :server_name, domain
    role :app, domain
    role :web, domain
    role :db, domain ,:primary => true
    set :disable_sso, true
    set :secure_db, true
  when "production_wc1"
    set :default_database_file, "database.production.yml.gpg"
    set :app_port, 5200
    set :rails_env, 'production'
    set :domain, 'prod33.wc1.yellowpages.com'
    set :server_name, domain
    role :app, domain
    role :web, domain
    role :db, domain, :primary => true
    set :disable_sso, true
    set :secure_db, true
  when "prod_wc1_1"
    set :default_database_file, "database.production.yml.gpg"
    set :app_port, 5200
    set :rails_env, 'production'
    set :domain, 'prod33.wc1.yellowpages.com'
    set :server_name, domain
    role :app, domain
    role :web, domain
    role :db, domain, :primary => true
    set :disable_sso, true
    set :secure_db, true
  else
    raise "unrecognized environment: #{environment}"
end

# set app_env to same as rails_env
set :app_env, rails_env

# =============================================================================
# GEMS
# =============================================================================

namespace :gems do
  desc "Make sure all gems are installed with the correct version"
  task :install do
    install_geminstaller unless gem_exists?('geminstaller')
    run_geminstaller
  end

  desc "Force installation of correct gem versions."
  task :install_force do
    run "cd #{current_path} && force=true rake gems:install"
  end

  desc "Install Rails on targets, used for cold setups and updates"
  task :install_rails do
    rails_version, rails_options = get_rails_info()
    run "gem install rails -v #{rails_version} #{rails_options}"
  end

  task :install_geminstaller do
    default_options = gem_config['defaults']['install_options']
    run "gem install geminstaller #{default_options}"
  end

  task :run_geminstaller do
    run "cd #{release_path} && geminstaller -g all"
  end
end


# Access to AppConfig without loading rails environment.
#set :app_config, AppConfig.app_config_configuration(rails_env)

##
# Application specific tasks.
require File.join(File.dirname(__FILE__), 'deploy', 'app')
namespace :deploy do
  task :migrate, :roles => :db do
    run %Q{cd #{release_path} ; #{oracle_env} TNS_ADMIN=#{release_path}/config }
  end
end

after 'deploy:update_code' do
  deploy.migrate
#  newrelic.notice_deployment
end

