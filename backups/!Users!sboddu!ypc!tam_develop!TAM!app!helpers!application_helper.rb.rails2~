
require 'forwardable'
require 'cgi'

module ApplicationHelper

  extend Forwardable

  def authorize_for(controller, action)
    User.current.allowed_to?({:controller => controller, :action => action}, @project)
  end

  def link_to_if_authorized(name, options = {}, html_options = nil, *parameters_for_method_reference)
    link_to(name, options, html_options, *parameters_for_method_reference) if authorize_for(options[:controller] || params[:controller], options[:action])
  end

  # Display a link to remote if user is authorized
  def link_to_remote_if_authorized(name, options = {}, html_options = nil)
    url = options[:url] || {}
    link_to_remote(name, options, html_options) if authorize_for(url[:controller] || params[:controller], url[:action])
  end

  # Displays a link to user's account page if active
  def link_to_user(user, options={})
    if user.is_a?(User)
      name = user.name(options[:format])
      if user.active?
        link_to name, :controller => 'users', :action => 'show', :id => user
      else
        name
      end
    elsif user.is_a?(Role)
      link_to h(user.lastname), :controller => 'roles', :action => 'edit', :id => user
    else
      user.blank?? h(@sso.user.to_s) : h(user.to_s) 
    end
  end

  
  def link_to_project(project, options={}, html_options = nil)
    if project.active?
    
      url = {:controller => 'projects', :action => 'show', :id => project}.merge(options)
     options.has_key?('display')? link_to(options['display'], url, html_options) : link_to(h(project)+'&nbsp;' * 2 + "("+h(project.environment)+")", url, html_options)
    else
      h(project)+'&nbsp;' * 2 + "("+h(project.environment)+")"
    end
  end

  def toggle_link(name, id, options={})
    onclick = "Element.toggle('#{id}'); "
    onclick << (options[:focus] ? "Form.Element.focus('#{options[:focus]}'); " : "this.blur(); ")
    onclick << "return false;"
    link_to(name, "#", :onclick => onclick)
  end

  def image_to_function(name, function, html_options = {})
    html_options.symbolize_keys!
    tag(:input, html_options.merge({
        :type => "image", :src => image_path(name),
        :onclick => (html_options[:onclick] ? "#{html_options[:onclick]}; " : "") + "#{function};"
        }))
  end

  def prompt_to_remote(name, text, param, url, html_options = {})
    html_options[:onclick] = "promptToRemote('#{text}', '#{param}', '#{url_for(url)}'); return false;"
    link_to name, {}, html_options
  end
  
  def render_page_hierarchy(pages, node=nil)
    content = ''
    if pages[node]
      content << "<ul class=\"pages-hierarchy\">\n"
      pages[node].each do |page|
        content << "<li>"
        content << link_to(h(page.pretty_title), {:controller => 'wiki', :action => 'show', :project_id => page.project, :id => page.title},
                           :title => (page.respond_to?(:updated_on) ? l(:label_updated_time, distance_of_time_in_words(Time.now, page.updated_on)) : nil))
        content << "\n" + render_page_hierarchy(pages, page.id) if pages[page.id]
        content << "</li>\n"
      end
      content << "</ul>\n"
    end
    content
  end
  
  # Renders flash messages
  def render_flash_messages
    s = ''
    flash.each do |k,v|
      s << content_tag('div', v, :class => "flash #{k}")
    end
    s
  end
  
  # Renders tabs and their content
  def render_tabs(tabs)
    if tabs.any?
      render :partial => 'common/tabs', :locals => {:tabs => tabs}
    else
      content_tag 'p', "No Data", :class => "nodata"
    end
  end
  
  # Renders the project quick-jump box
  def render_project_jump_box
    # Retrieve them now to avoid a COUNT query
    projects = User.current.projects.all
    if projects.any?
      s = '<select onchange="if (this.value != \'\') { window.location = this.value; }">' +
            "<option value=''>Jump to a project</option>" +
            '<option value="" disabled="disabled">---</option>'
      s << project_tree_options_for_select(projects, :selected => @project) do |p|
        { :value => url_for(:controller => 'projects', :action => 'show', :id => p, :jump => current_menu_item) }
      end
      s << '</select>'
      s
    end
  end

  def project_options_for_select(projects,options = {})
    value = options["selected"].to_i
    options = content_tag('option', "--Select--")
    s = ''
    project_tree(projects) do |project, level|
      tag_options = {:value => project.id}
      tag_options[:selected] = 'selected' if  value == project.id
      tag_options.merge!(yield(project)) if block_given?
      s << content_tag('option', h(project)+'&nbsp;' * 2 + "("+h(project.environment)+")", tag_options)
      end
      options << s
  end
  
  def project_tree_options_for_select(projects, options = {})
    s = ''
    project_tree(projects) do |project, level|
      name_prefix = (level > 0 ? ('&nbsp;' * 2 * level + '&#187; ') : '')
      tag_options = {:value => project.id}
      if project == options[:selected] || (options[:selected].respond_to?(:include?) && options[:selected].include?(project))
        tag_options[:selected] = 'selected'
      else
        tag_options[:selected] = nil
      end
      tag_options.merge!(yield(project)) if block_given?
      s << content_tag('option', name_prefix + h(project)+'&nbsp;' * 2 + "("+h(project.environment)+")", tag_options)
    end
    s
  end
  
  # Yields the given block for each project with its level in the tree
  #
  # Wrapper for Project#project_tree
  def project_tree(projects, &block)
    Project.project_tree(projects, &block)
  end
  
  def project_nested_ul(projects, &block)
    s = ''
    if projects.any?
      ancestors = []
      projects.sort_by(&:lft).each do |project|
        if (ancestors.empty? || project.is_descendant_of?(ancestors.last))
          s << "<ul>\n"
        else
          ancestors.pop
          s << "</li>"
          while (ancestors.any? && !project.is_descendant_of?(ancestors.last)) 
            ancestors.pop
            s << "</ul></li>\n"
          end
        end
        s << "<li>"
        s << yield(project).to_s
        ancestors << project
      end
      s << ("</li></ul>\n" * ancestors.size)
    end
    s
  end
  
  def principals_check_box_tags(name, principals)
    s = ''
    mail = ''
    principals.sort.each do |principal|
     
      mail = "(#{principal.mail})" if !principal.mail.blank?
      s << "<label>#{ check_box_tag name, principal.id, false }<b> #{h principal}</b> #{mail} </label>\n"
    end
    s 
  end

  # Truncates and returns the string as a single line
  def truncate_single_line(string, *args)
    truncate(string.to_s, *args).gsub(%r{[\r\n]+}m, ' ')
  end
  
  # Truncates at line break after 250 characters or options[:length]
  def truncate_lines(string, options={})
    length = options[:length] || 250
    if string.to_s =~ /\A(.{#{length}}.*?)$/m
      "#{$1}..."
    else
      string
    end
  end

  def html_hours(text)
    text.gsub(%r{(\d+)\.(\d+)}, '<span class="hours hours-int">\1</span><span class="hours hours-dec">.\2</span>')
  end

  def authoring(created, author, options={})
    l(options[:label] || :label_added_time_by, :author => link_to_user(author), :age => time_tag(created))
  end
  
  def time_tag(time)
    text = distance_of_time_in_words(Time.now, time)
    if @project
      link_to(text, {:controller => 'activities', :action => 'index', :id => @project, :from => time.to_date}, :title => format_time(time))
    else
      content_tag('acronym', text, :title => format_time(time))
    end
  end

  def syntax_highlight(name, content)
    Tam::SyntaxHighlighting.highlight_by_filename(content, name)
  end

  def to_path_param(path)
    path.to_s.split(%r{[/\\]}).select {|p| !p.blank?}
  end

  def pagination_links_full(paginator, count=nil, options={})
    page_param = options.delete(:page_param) || :page
    
    url_param = params.dup
    # don't reuse query params if filters are present
    url_param.merge!(:fields => nil, :values => nil, :operators => nil) if url_param.delete(:set_filter)

    html = ''
    if paginator.current.previous
      html << link_to_remote_content_update('&#171; ' + 'previous', url_param.merge(page_param => paginator.current.previous)) + ' '
    end

    html << (pagination_links_each(paginator, options) do |n|
      link_to_remote_content_update(n.to_s, url_param.merge(page_param => n))
    end || '')
    
    if paginator.current.next
      html << ' ' + link_to_remote_content_update(('next' + ' &#187;'), url_param.merge(page_param => paginator.current.next))
    end

    unless count.nil?
      html << " (#{paginator.current.first_item}-#{paginator.current.last_item}/#{count})"
    end

    html
  end
  
 
  
  def reorder_links(name, url)
    link_to(image_tag('2uparrow.png',   :alt => " Move to top"), url.merge({"#{name}[move_to]" => 'highest'}), :method => :post, :title => "Move to top") +
    link_to(image_tag('1uparrow.png',   :alt => " Move up"),  url.merge({"#{name}[move_to]" => 'higher'}),  :method => :post, :title => " Move up") +
    link_to(image_tag('1downarrow.png', :alt => "Move down"),   url.merge({"#{name}[move_to]" => 'lower'}),   :method => :post, :title => "Move down") +
    link_to(image_tag('2downarrow.png', :alt => "Move to bottom"),  url.merge({"#{name}[move_to]" => 'lowest'}),  :method => :post, :title => "Move to bottom")
  end

  def other_formats_links(&block)
    concat('<p class="other-formats">' + l(:label_export_to))
    yield Tam::Views::OtherFormatsBuilder.new(self)
    concat('</p>')
  end
  
  def page_header_title
    if @project.blank? || @project.new_record?
      "TAM"
    else
      b = []
      b << h(@project)
      b << h(@project.try(:environment))
      b.join(' &#187; ')
    end
  end

  def html_title(*args)
    if args.empty?
      title = []
      title << @project.name if @project
      title += @html_title if @html_title
      title.select {|t| !t.blank? }.join(' - ')
    else
      @html_title ||= []
      @html_title += args
    end
  end

  # Returns the theme, controller name, and action as css classes for the
  # HTML body.
  def body_css_classes
    css = []
    css << 'controller-' + params[:controller]
    css << 'action-' + params[:action]
    css.join(' ')
  end

  def accesskey(s)
    Tam::AccessKeys.key_for s
  end

  # Formats text according to system settings.
  # * with a String: textilizable(text, options)

  def textilizable(*args)
    options = args.last.is_a?(Hash) ? args.pop : {}
    case args.size
    when 1
      obj = options[:object]
      text = args.shift
    when 2
      obj = args.shift
      attr = args.shift
      text = obj.send(attr).to_s
    else
      raise ArgumentError, 'invalid arguments to textilizable'
    end
    return '' if text.blank?
    project = options[:project] || @project || (obj && obj.respond_to?(:project) ? obj.project : nil)
    only_path = options.delete(:only_path) == false ? false : true

    
    @parsed_headings = []
    text = parse_non_pre_blocks(text) do |text|
      [:parse_headings].each do |method_name|
        send method_name, text, project, obj, attr, only_path, options
      end
    end
    
    if @parsed_headings.any?
      replace_toc(text, @parsed_headings)
    end
    
    text
  end
  
  def parse_non_pre_blocks(text)
    s = StringScanner.new(text)
    tags = []
    parsed = ''
    while !s.eos?
      s.scan(/(.*?)(<(\/)?(pre|code)(.*?)>|\z)/im)
      text, full_tag, closing, tag = s[1], s[2], s[3], s[4]
      if tags.empty?
        yield text
      end
      parsed << text
      if tag
        if closing
          if tags.last == tag.downcase
            tags.pop
          end
        else
          tags << tag.downcase
        end
        parsed << full_tag
      end
    end
    # Close any non closing tags
    while tag = tags.pop
      parsed << "</#{tag}>"
    end
    parsed
  end
  


  HEADING_RE = /<h(1|2|3|4)( [^>]+)?>(.+?)<\/h(1|2|3|4)>/i unless const_defined?(:HEADING_RE)
  
  # Headings and TOC
  # Adds ids and links to headings unless options[:headings] is set to false
  def parse_headings(text, project, obj, attr, only_path, options)
    return if options[:headings] == false
    
    text.gsub!(HEADING_RE) do
      level, attrs, content = $1.to_i, $2, $3
      item = strip_tags(content).strip
      anchor = item.gsub(%r{[^\w\s\-]}, '').gsub(%r{\s+(\-+\s*)?}, '-')
      @parsed_headings << [level, anchor, item]
      "<h#{level} #{attrs} id=\"#{anchor}\">#{content}<a href=\"##{anchor}\" class=\"wiki-anchor\">&para;</a></h#{level}>"
    end
  end
          
  TOC_RE = /<p>\{\{([<>]?)toc\}\}<\/p>/i unless const_defined?(:TOC_RE)
  
  # Renders the TOC with given headings
  def replace_toc(text, headings)
    text.gsub!(TOC_RE) do
      if headings.empty?
        ''
      else
        div_class = 'toc'
        div_class << ' right' if $1 == '>'
        div_class << ' left' if $1 == '<'
        out = "<ul class=\"#{div_class}\"><li>"
        root = headings.map(&:first).min
        current = root
        started = false
        headings.each do |level, anchor, item|
          if level > current
            out << '<ul><li>' * (level - current)
          elsif level < current
            out << "</li></ul>\n" * (current - level) + "</li><li>"
          elsif started
            out << '</li><li>'
          end
          out << "<a href=\"##{anchor}\">#{item}</a>"
          current = level
          started = true
        end
        out << '</li></ul>' * (current - root)
        out << '</li></ul>'
      end
    end
  end

  # Same as Rails' simple_format helper without using paragraphs
  def simple_format_without_paragraph(text)
    text.to_s.
      gsub(/\r\n?/, "\n").                    # \r\n and \r -> \n
      gsub(/\n\n+/, "<br /><br />").          # 2+ newline  -> 2 br
      gsub(/([^\n]\n)(?=[^\n])/, '\1<br />')  # 1 newline   -> br
  end

 
  def label_tag_for(name, option_tags = nil, options = {})
    label_text = l(("field_"+field.to_s.gsub(/\_id$/, "")).to_sym) + (options.delete(:required) ? @template.content_tag("span", " *", :class => "required"): "")
    content_tag("label", label_text)
  end

  def labelled_tabular_form_for(name, object, options, &proc)
    options[:html] ||= {}
    options[:html][:class] = 'tabular' unless options[:html].has_key?(:class)
    form_for(name,object, options.merge({ :builder => TabularFormBuilder}), &proc)
  end

  def back_url_hidden_field_tag
    back_url = params[:back_url] || request.env['HTTP_REFERER']
    back_url = CGI.unescape(back_url.to_s)
    hidden_field_tag('back_url', CGI.escape(back_url)) unless back_url.blank?
  end
 
  def checked_image(checked=true)
    if checked
      image_tag 'toggle_check.png'
    end
  end
  
  def context_menu(url)
    unless @context_menu_included
      content_for :header_tags do
        javascript_include_tag('context_menu') +
          stylesheet_link_tag('context_menu')
      end
      if l(:direction) == 'rtl'
        content_for :header_tags do
          stylesheet_link_tag('context_menu_rtl')
        end
      end
      @context_menu_included = true
    end
    javascript_tag "new ContextMenu('#{ url_for(url) }')"
  end

  def context_menu_link(name, url, options={})
    options[:class] ||= ''
    if options.delete(:selected)
      options[:class] << ' icon-checked disabled'
      options[:disabled] = true
    end
    if options.delete(:disabled)
      options.delete(:method)
      options.delete(:confirm)
      options.delete(:onclick)
      options[:class] << ' disabled'
      url = '#'
    end
    link_to name, url, options
  end

 
  def content_for(name, content = nil, &block)
    @has_content ||= {}
    @has_content[name] = true
    super(name, content, &block)
  end

  def has_content?(name)
    (@has_content && @has_content[name]) || false
  end

  
  def get_project_name(project_id)
    begin
      p = Project.find_by_id(project_id)
      "#{p.name} (#{p.environment})"
    rescue Exception => e
      return ""
    end
  end
  
  private

 
  def render_top_menu
    links = []
    links << [ content_tag('li', link_to("Home",{:action=>"index", :controller=>"welcome"}))]
    links << [ content_tag('li', link_to("Projects",{:action=>"index", :controller=>"projects"}))]
    links << [ content_tag('li', link_to("Administration",{:action=>"index", :controller=>"admin"}))] if User.current.admin?
   links.empty? ? nil : content_tag('ul', links.join("\n"))   
  end


  def render_account_menu
    links = []
   
    links << [ content_tag('li', link_to("Login",{:action=>"index", :controller=>"welcome"},:if => @current_user.blank?))] if @sso.blank?
    links << [ content_tag('li', link_to("Logout","#{SSO_URL}http://#{request.host_with_port}",:if => !@current_user.blank?))]   if !@sso.blank?
    links.empty? ? nil : content_tag('ul', links.join("\n"))   
  end


   def render_admin_menu
    links = []
    links << [ content_tag('li', link_to("Projects",{:controller => 'admin', :action => 'projects'},:class => 'projects'))]
    links << [ content_tag('li', link_to("Users",{:controller => 'users'},:class => 'users'))]
    links << [ content_tag('li', link_to("Roles",{:controller => 'roles'},:class => 'roles'))]
    links << [ content_tag('li', link_to("Permissions",{:controller => 'permissions'},:class => 'permissions'))]
    links.empty? ? nil : content_tag('ul', links.join("\n"))   
  end
  
  
end
