;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

// // Place your application-specific JavaScript functions and classes here
// // This file is automatically included by javascript_include_tag :defaults

// //$(function(){

// // $("#attribute_form").submit(function() {
// //     if ($("input:first").val() == "correct") {
// //       $("span").text("Validated...").show().fadeOut(2000);
// //       return true;
// //     }
// //     $("span").text("Not valid!").show().fadeOut(1000);
// //     return false;
// //   });

// // });

// jQuery.ajaxSetup({ 
//   'beforeSend': function(xhr) {xhr.setRequestHeader("Accept", "text/javascript")}
// })

// $(function(){

// $("#attribute_form").submit(function() {
//     if ($("#validation_data").val() == "correct") {
//       $("span").text("Validated...").show();
//       return true;
//     }
//     $("span").text("Not valid!").show().fadeOut(1000);
//     return false;
//   });

// });


// function update_attributes(s) 
// {
// s = 'form values'
//  alert(s);

// }

// $(document).ready(function() {
//     var data = [
//                   { ID: 1, FirstName: 'Anne', Email: 'anne@domain.com' },
//                   { ID: 2, FirstName: 'Amelie', Email: 'amelie@domain.com' },
//                   { ID: 3, FirstName: 'Polly', Email: 'polly@domain.com' },
//                   { ID: 4, FirstName: 'Alice', Email: 'alice@domain.com' },
//                   { ID: 5, FirstName: 'Martha', Email: 'martha@domain.com' }
//                ];

//     $("#jTemplateDemo").setTemplate($("#templateHolder").html());
//     $("#jTemplateDemo").processTemplate(data);
// });




$(function(){
	$("#tmplPeople")
		.tmpl( people )
		.appendTo(".peopleTable");
});

var people = [
	{
		firstName: "John",
		lastName: "Resig",
		url: "http://ejohn.org/",
		cities: [
			{ name: "Boston", state: "MA" },
			{ name: "San Francisco", state: "CA" }
		]
	}
];

function index( item, array ) {
	return $.inArray( item, array ) + 1;
}

function getName() {
	return this.data.firstName + " " + this.data.lastName;
}

function alternate( item, array ) {
	return ($.inArray( item, array ) % 2) ? "personAlt" : "person";
}


class Attribute < ActiveRecord::Base


  def initialize(id=nil, no_of_attr = 1)
    attributes = get_data(id,no_of_attr)
    p attributes
    attributes
  end
  
  def get_data(id,n)
 #   attributes = id.blank?? Attribute.find(:all, :conditions =>{:status => 'valid'},:limit => n) : Attribute.find(:all, :conditions =>["status = ? AND id = ?", 'valid',id ],:limit => n)
     Attribute.find(:all, :conditions =>["status = ? AND id = ?", 'valid',id ],:limit => n)
     
  end

  def add_type
    
  end
  
end


$("#tmplAttribute").tmpl( people ).appendTo(".attributeData");

<script id="tmplAttribute" type="text/x-jquery-tmpl">
	<tr class="${alternate($data, people)}"><td colspan="2"><a href="${url}">${getName()}</a></td></tr>
	{{each cities}}
		<tr class="cityseparator"><td colspan="2"></td></tr>
		<tr class="${alternate($data, people)}"><td colspan="2"><b><i>City ${index($value, cities)}:</i></b></td></tr>
		<tr class="${alternate($data, people)}"><td><b>${name}</b></td><td>${state}</td></tr>
	{{/each}}
	<tr class="separator"><td colspan="2"></td></tr>
</script>

<table class="attributeData"><tbody>
	<tr class="separator"><td colspan="2"></td></tr>
</tbody></table>


 <%= time_select 'event', 'time', {:twelve_hour => true ,:minute_step => 15 } %>

^([ 01]?[0-9]|2[0-3])(:[0-5][0-9])?$
